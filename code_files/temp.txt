Here are 20 key methods and properties of the MediaPipe Hands module for hand detection, retrieving landmark values, and working with those landmarks in code. This includes setting up the hands solution, processing frames, accessing hand landmarks, and drawing landmarks on images.

Before running the code, ensure you have installed MediaPipe and OpenCV:
```bash
pip install mediapipe opencv-python
```

Here's a breakdown of methods, properties, and code examples:

---

### **1. Initialize MediaPipe Hands**
```python
import mediapipe as mp

mp_hands = mp.solutions.hands
hands = mp_hands.Hands()
```
- **mp.solutions.hands.Hands()**: Initializes the hand-tracking model.

### **2. Set Custom Detection Parameters**
```python
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.7, min_tracking_confidence=0.7)
```
- **static_image_mode**: If `True`, detects hands in every frame; if `False`, tracks hands across frames.
- **max_num_hands**: Limits the number of hands to detect.
- **min_detection_confidence**: Sets the minimum confidence for hand detection.
- **min_tracking_confidence**: Sets the minimum confidence for tracking landmarks.

### **3. Processing Frames for Hand Detection**
```python
results = hands.process(image)
```
- **hands.process(image)**: Processes an image (in RGB format) to detect hands and landmarks.

---

### **4. Check for Hand Detection Results**
```python
if results.multi_hand_landmarks:
    print("Hands detected.")
```
- **results.multi_hand_landmarks**: Checks if hand landmarks are detected.

### **5. Identify Which Hand is Detected**
```python
for hand_info in results.multi_handedness:
    print(hand_info.classification[0].label)  # Prints "Left" or "Right"
```
- **results.multi_handedness**: Provides information on each detected hand (left or right).

---

### **6. Access Individual Landmark Positions**
```python
for hand_landmarks in results.multi_hand_landmarks:
    for idx, landmark in enumerate(hand_landmarks.landmark):
        print(f"Landmark {idx}: (X: {landmark.x}, Y: {landmark.y}, Z: {landmark.z})")
```
- **landmark.x, landmark.y, landmark.z**: X, Y, and Z coordinates of each landmark point.

### **7. Specific Landmark Indexes for Each Hand Part**
```python
wrist = hand_landmarks.landmark[0]
thumb_tip = hand_landmarks.landmark[4]
index_finger_tip = hand_landmarks.landmark[8]
middle_finger_tip = hand_landmarks.landmark[12]
```
- **landmark[0] to landmark[20]**: Specific indexes for each landmark in the hand (e.g., wrist, thumb tip, etc.).

---

### **8. Convert Landmark Coordinates to Pixel Values**
```python
image_height, image_width, _ = image.shape
for landmark in hand_landmarks.landmark:
    x_px = int(landmark.x * image_width)
    y_px = int(landmark.y * image_height)
    print(f"Landmark in pixels: X = {x_px}, Y = {y_px}")
```
- **Scaling X and Y to pixel values**: Converts normalized landmark coordinates to pixel positions.

---

### **9. Draw Hand Landmarks**
```python
mp_drawing = mp.solutions.drawing_utils
for hand_landmarks in results.multi_hand_landmarks:
    mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)
```
- **mp_drawing.draw_landmarks**: Draws landmarks and connections on the image.

---

### **10. Customize Landmark Drawing Style**
```python
mp_drawing_styles = mp.solutions.drawing_styles
for hand_landmarks in results.multi_hand_landmarks:
    mp_drawing.draw_landmarks(
        image,
        hand_landmarks,
        mp_hands.HAND_CONNECTIONS,
        mp_drawing_styles.get_default_hand_landmarks_style(),
        mp_drawing_styles.get_default_hand_connections_style())
```
- **mp_drawing_styles.get_default_hand_landmarks_style**: Default style for drawing hand landmarks.

---

### **11. Calculate Distance Between Two Landmarks**
```python
import math

def calculate_distance(landmark1, landmark2):
    return math.sqrt((landmark1.x - landmark2.x)**2 + (landmark1.y - landmark2.y)**2 + (landmark1.z - landmark2.z)**2)

thumb_index_distance = calculate_distance(hand_landmarks.landmark[4], hand_landmarks.landmark[8])
print(f"Distance between thumb and index finger: {thumb_index_distance}")
```
- **calculate_distance**: Finds the Euclidean distance between two landmarks.

---

### **12. Check for a Specific Hand Gesture (Thumbs Up)**
```python
if hand_landmarks.landmark[4].y < hand_landmarks.landmark[3].y:  # Thumb is up
    print("Thumbs up detected!")
```
- **Thumbs-up gesture**: Checks relative positions of landmarks for gesture recognition.

---

### **13. Check for Hand Openness (Index Finger Tip Above Wrist)**
```python
if hand_landmarks.landmark[8].y < hand_landmarks.landmark[0].y:
    print("Hand is open")
```
- **Hand openness**: Simple condition to determine if the hand is open.

---

### **14. Access Number of Detected Hands**
```python
num_hands = len(results.multi_hand_landmarks) if results.multi_hand_landmarks else 0
print(f"Number of hands detected: {num_hands}")
```
- **len(results.multi_hand_landmarks)**: Retrieves the count of detected hands.

---

### **15. Save Landmark Data for Analysis**
```python
landmark_data = [(lm.x, lm.y, lm.z) for lm in hand_landmarks.landmark]
print(landmark_data)
```
- **Save data**: Stores landmark coordinates in a list for analysis.

---

### **16. Draw Bounding Box around the Hand**
```python
x_coords = [lm.x for lm in hand_landmarks.landmark]
y_coords = [lm.y for lm in hand_landmarks.landmark]
min_x, max_x = min(x_coords), max(x_coords)
min_y, max_y = min(y_coords), max(y_coords)

image_width, image_height, _ = image.shape
cv2.rectangle(image,
              (int(min_x * image_width), int(min_y * image_height)),
              (int(max_x * image_width), int(max_y * image_height)),
              (0, 255, 0), 2)
```
- **Bounding box**: Computes and draws a bounding box based on landmark positions.

---

### **17. Calculate Angle Between Fingers**
```python
def calculate_angle(lm1, lm2, lm3):
    a = (lm1.x - lm2.x, lm1.y - lm2.y, lm1.z - lm2.z)
    b = (lm3.x - lm2.x, lm3.y - lm2.y, lm3.z - lm2.z)
    dot_product = sum(i * j for i, j in zip(a, b))
    magnitude = math.sqrt(sum(i**2 for i in a)) * math.sqrt(sum(i**2 for i in b))
    return math.acos(dot_product / magnitude)

angle = calculate_angle(hand_landmarks.landmark[5], hand_landmarks.landmark[6], hand_landmarks.landmark[8])
print(f"Angle between landmarks: {angle}")
```
- **calculate_angle**: Finds the angle between three landmarks.

---

### **18. Track and Store Landmarks for Each Frame**
```python
all_landmark_data = []
all_landmark_data.append([(lm.x, lm.y, lm.z) for lm in hand_landmarks.landmark])
```
- **Store landmarks**: Saves landmarks across frames for further analysis.

---

### **19. Filter Hand Detection by Confidence Level**
```python
if hand_info.classification[0].score > 0.8:
    print("High confidence in detected hand")
```
- **classification[0].score**: Confidence level of detected hand.

---

### **20. Release the Hands Solution (Resource Management)**
```python
hands.close()
```
- **hands.close()**: Frees resources by closing the hands solution instance.

---

Each example above represents a method or approach for using MediaPipeâ€™s Hands solution to track hand landmarks, interpret gestures, or work with landmark data in different ways.